buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.mini2Dx', name: 'butler', version: '2.1.0'
        classpath group: 'org.mini2Dx', name: 'parcl', version: '1.8.0'
    }
}

plugins {
    id 'infinity.app-with-assets'
    id 'com.github.ben-manes.versions' version '0.44.0'
}

mainClassName = "infinity.Main"

version = "1.0.0"

applicationDefaultJvmArgs = ["-Xmx1024m", "-Xms512m", "-XX:MaxDirectMemorySize=1024m", "--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED"]

dependencies {
    implementation "org.jetbrains:annotations:25.0.0"
    // logging
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    implementation 'com.github.stephengold:Heart:9.1.0'

    //https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    implementation "com.google.code.findbugs:jsr305:3.0.2"

    //Dyn4j
    //http://www.dyn4j.org/
    //implementation "org.dyn4j:dyn4j:3.4.0"
    //implementation "org.dyn4j:dyn4j:4.0.0"
    //implementation project(":dyn4j-bin")

    //Ini4j to parse settings files
    //http://ini4j.sourceforge.net/// 
    //https://mvnrepository.com/artifact/org.ini4j/ini4j
    implementation "org.ini4j:ini4j:0.5.4"

    // Apache Commons Stuff
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-math:2.2"

    // Trying this for saving/loading configs
    implementation "com.google.code.gson:gson:${gsonVersion}"

    // For Lemur styles
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"

    // jMonkeyEngines
    implementation "org.jmonkeyengine:jme3-core:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-effects:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"
    implementation "org.jmonkeyengine:jme3-plugins:$jmeVersion"

    // Simsilica
    implementation "com.simsilica:lemur:$lemurVersion"
    implementation "com.simsilica:lemur-proto:$lemurProtoVersion"
    implementation "com.simsilica:lemur-props:$lemurPropsVersion"
    implementation "com.simsilica:pager:1.0.1-SNAPSHOT"
    implementation "com.simsilica:sim-ethereal:$simEtherealVersion"
    implementation "com.simsilica:sim-fx:1.0.1-SNAPSHOT"
    implementation "com.simsilica:sim-math:$simMathVersion"
    implementation "com.simsilica:sio2:$sio2Version"
    implementation "com.simsilica:zay-es:$zayEsVersion"
    implementation "com.simsilica:zay-es-net:$zayEsNetVersion"

    // Simsilica MOSS
    //implementation "com.simsilica:mphys:$mossVersion"
    implementation "com.simsilica:mblock:$mossVersion"
    implementation "com.simsilica:mblock-physb:$mossVersion"
    implementation "com.simsilica:mworld:$mossVersion"
    implementation "com.simsilica:sio2-mblock:$mossVersion"
    implementation "com.simsilica:sio2-mphys:$mossVersion"
    implementation "com.simsilica:bpos:$mossVersion"
    implementation "com.simsilica:crig:$mossVersion"

    //jWalkable for 2d polygonal pathfinding
    //https://github.com/implicit-invocation/jwalkable
    //implementation "com.github.implicit-invocation:jwalkable:master-SNAPSHOT"

    //Noise4j dungeon generation
    //https://github.com/czyzby/noise4j
    implementation "com.github.czyzby:noise4j:0.1.0"

    //GDX-AI for steering behaviours
    //https://github.com/libgdx/gdx-ai
    //compile "com.badlogicgames.gdx:gdx-ai:1.8.1:sources"
    //compile "com.badlogicgames.gdx:gdx-ai:1.8.1:javadoc"
    implementation "com.badlogicgames.gdx:gdx-ai:1.8.2"

    //We"re using a java port of http://www.angusj.com/delphi/clipper.php to do polygon boolean operations
    implementation "de.lighti:Clipper:6.4.2"

    // Local dependencies
    implementation project(":api")
    runtimeOnly project(":modules")
}

//checkstyle {
//    sourceSets = []
//}

//jar {
//    archiveBaseName = "subspace-infinity"
//}


distributions {
    main {
        distributionBaseName = "infinity"
    }
}

apply plugin: "org.mini2Dx.parcl"
apply plugin: "org.mini2Dx.butler"

parcl {
    app {
        vmArgs = applicationDefaultJvmArgs
        appName = "subspace-infinity"
        icon = "relative/path/to/icon.icns"
        applicationCategory = "opensource.space-sim"
        displayName = "subspace-infinity"
        identifier = "subspace-infinity"
        copyright = 'Copyright 2023 Asser Fahrenholz'
    }

    exe {
        exeName = "subspace-infinity"
        print getProject().name
    }

    linux {
        binName = "subspace-infinity"
    }
}

butler {
    user = "assofohdz"
    game = "subspace-infinity"
    updateButler = true
    butlerInstallDirectory = "C:\\workspace\\Subspace\\Subspace-Infinity\\butler-windows"
}

task butlerPush(type: org.mini2Dx.butler.task.PushTask) {
    dependsOn clean
    dependsOn build
    dependsOn bundleNative
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('bundleNative').mustRunAfter 'build'
    binDirectory = file("$buildDir\\windows")
    channel = "windows"
}